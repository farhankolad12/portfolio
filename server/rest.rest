POST https://farhankolad.onrender.com/api/blog HTTP/1.1
Content-Type: application/json

{
    "img": "https://res.cloudinary.com/dt2rvxidl/image/upload/v1705753797/ym5ppetaoat53h2qjvpw.png",
    "shortInfo": "This article explains how can we create our own custom delegate in Swift UI with a simple example to put things at the right place.",
    "header": "How to create our own custom delegate in Swift?",
    "tags": "[\"IOS\", \"Swift\"]",
    "blog": "<p style='margin-left:0px;'> <strong>What are delegates?</strong> </p> <p style='margin-left:0px;'> Delegation (writing delegates) is a design pattern commonly used in iOS development. In this pattern, an object (the 'delegate') is designated to handle specific responsibilities or provide functionality for another object. The delegation pattern is used to establish communication between objects without creating a strong coupling between them. </p> <p style='margin-left:0px;'> <strong>Let's understand with an example.</strong> </p> <p style='margin-left:0px;'> Let's say we have a view that allows the user to enter some text and we want to notify the parent view when the user taps the 'Submit' button. We can use a delegate to accomplish this.<br> First, we need to define a protocol that our delegate will conform to. In this case, we'll call it SubmitButtonDelegate: </p> <pre><code class='language-javascript'>protocol SubmitButtonDelegate { func submitButtonTapped() }</code></pre> <p style='margin-left:0px;'> This protocol defines a single method that will be called when the submit button is tapped. Next, we need to create a view that includes a submit button and a reference to our delegate: </p> <pre><code class='language-javascript'>struct SubmitButtonView: View { var delegate: SubmitButtonDelegate? var body: some View { Button('Submit') { delegate?.submitButtonTapped() } } }</code></pre> <p style='margin-left:0px;'> In this view, we define a reference to our delegate using the delegate property. The Button element calls the submitButtonTapped() method on the delegate when it is tapped.<br> Finally, we need to implement the SubmitButtonDelegate protocol in our parent view: </p> <pre><code class='language-javascript'>struct ParentView: View, SubmitButtonDelegate { var body: some View { VStack { Text('Enter some text:') TextField('Text', text: .constant('')) SubmitButtonView(delegate: self) } } func submitButtonTapped() { //handle the submit button tap here } }</code></pre> <p style='margin-left:0px;'> In this view, we create an instance of the<code>SubmitButtonView</code> and pass in a reference to self as the delegate. We also implement the <code>submitButtonTapped()</code>method to handle the button tap.<br> When the user taps the submit button, the <code>submitButtonTapped()</code> method will be called on the parent view, allowing us to handle the event and update the UI as needed.<br> That's it! This is a simple example of how to create a custom delegate in SwiftUI. The delegation pattern can be used in many different scenarios to allow communication between different parts of your app. </p> <p> <br> &nbsp; </p>"
  }